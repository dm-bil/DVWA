# Name of this GitHub Actions workflow.
name: Semgrep Full Scan

on:
  workflow_dispatch: 
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  semgrep:
    # User definable name of this GitHub Actions job.
    name: semgrep/scan
    # If you are self-hosting, change the following `runs-on` value:
    runs-on: ubuntu-latest

    container:
      # A Docker image with Semgrep installed. Do not change this.
      image: semgrep/semgrep

    steps:
      # Fetch project source with GitHub Actions Checkout. Use either v3 or v4.
      - uses: actions/checkout@v4
      # Run the "semgrep ci" command on the command line of the docker image.
      - name: Run Semgrep fullscan
        run: semgrep scan --config auto --oss-only --dataflow-traces -q --text --json-output=semgrep_fullscan.json --vim-output=semgrep_fullscan.txt --severity=WARNING --severity=ERROR .
      - name: Get count of high severity issues
        run: echo "high_severity=$(cat semgrep_fullscan.json | jq '.results[].extra | select(.severity == "ERROR")' | jq --slurp '.' | jq length)" >> $GITHUB_OUTPUT
        id: high_count
#      - name: Get Semgrep report
#        run: echo "report=$(cat semgrep_fullscan.txt)" >> $GITHUB_OUTPUT
#        id: read_report
      - name: Fail Status Check
        if: ${{ steps.high_count.outputs.high_severity > 0}}
        env:
          GH_TOKEN: ${{ github.token }}
          ISSUES_COUNT: ${{ steps.high_count.outputs.high_severity }}
 #         REPORT_CONTENTS: ${{ steps.read_report.outputs.report }}
        run: |
            curl -L -X POST \
             -H "Accept: application/vnd.github+json" \
             -H "Authorization: Bearer $GH_TOKEN"\
             -H "X-GitHub-Api-Version: 2022-11-28" \
             https://api.github.com/repos/${{ github.repository }}/check-runs \
             -d '{"name":"Semgrep Status Check", "head_sha":"${{ github.event.pull_request.head.sha }}", "conclusion":"failure","output":{"title":"Semgrep scan results", "summary":"Semgrep scanner has found '$ISSUES_COUNT' severe vulnerabilities!", "text": "'"$(awk '{gsub(/'\''/, "'\''\\\\'\'\''");gsub(/"/, "\\\""); printf "%s\\n\\n", $0}' semgrep_fullscan.txt)"'","annotations":[{"annotation_level": "error", "start_line": "12", "end_line": "12", "path": "vulnerabilities/brute/source/low.php", "title": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library."}]}}'    
